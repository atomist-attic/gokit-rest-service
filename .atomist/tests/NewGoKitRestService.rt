/*
 * Copyright Â© 2016 Atomist, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

scenario NewGoKitRestService should create a new project based on this archive

let readmeFilename = "README.md"
let project_name = "GoKitMicroservice"
let org_name = "TestOrg"
let service_name = "mightymicro"
let service_contract_name = "mightymicrocontract"
let description = "My cool new Go kit microservice"

let mainFile = "main.go"
let microserviceContractFile = { service_name + "/contract.go" }
let microserviceTestFile = { service_name + "/hello_world_test.go" }
let microserviceImplementationFile = { service_name + "/hello_world.go" }

given
  ArchiveRoot

when
  NewGoKitRestService

then
  fileExists mainFile
    and fileContains mainFile { return "github.com/" + org_name + "/" + project_name + "/" + service_name }
    and fileExists readmeFilename
    and fileContains readmeFilename { "# " + service_name + " microservice" }
    and directoryExists service_name
    and fileExists microserviceContractFile
    and fileContains microserviceContractFile { "package " + service_name }
    and fileContains microserviceContractFile { service_name + "Handler)" }
    and fileContains microserviceContractFile { service_name + "Handler := httptransport.NewServer(" }
    and fileContains microserviceContractFile { return "type " + service_name + " struct{}" }
    and fileContains microserviceContractFile { return "svc := " + service_name + "{}" }
    and fileExists microserviceTestFile
    and fileContains microserviceTestFile { "package " + service_name }
    and fileContains microserviceTestFile  { return service_name + "{}" }
    and fileExists microserviceImplementationFile
    and fileContains microserviceImplementationFile { "package " + service_name }
    and fileContains microserviceImplementationFile { "(h " + service_name }
    and fileContains microserviceImplementationFile { "func makeHelloWorldEndpoint(svc " + service_contract_name }
    and fileContains readmeFilename description
    and {!result.fileExists("CHANGELOG.md")}
    and {!result.fileExists("CODE_OF_CONDUCT.md")}
